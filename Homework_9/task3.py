# Дана функция get_kinetic_energy, которая вычисляет кинетическую энергию. В ней ничего изменять не нужно!
#
# Напишите декоратор memorize, который организует механизм кэширования данной функции.
#
# Декоратор должен сохранять информацию о вызове функции в словарь, в котором ключ - это аргументы, с которыми была вызвана функция, а значение - это результат выполнения функции.
#
# Если функция с такими аргументами вызывается впервые, то в словарь добавляется информация об этом вызове.
#
# Если функция с такими аргументами уже вызывалась, то новое значение в словарь не добавляется.
#
#
# Входные данные:
#
# число weight типа int - масса
# число speed типа int - скорость
# Выходные данные:
#
# кортеж типа tuple из двух элементов: результат вычисления кинетической энергии и словарь с информацией о вызовах функции
#
# Пример:
#
# # Вызвали функцию с аргументами (5, 2)
# # В выводе: 10.0 - результат функции, {(5, 2): 10.0} - словарь с информацией о параметрах и результате функции
# get_kinetic_energy(5, 2) --> (10.0, {(5, 2): 10.0})
# #
# # Вызвали функцию с аргументами (5, 3)
# # В выводе есть информация о предыдущем вызове с аргументами (5, 2) и новом вызове с аргументами (5, 3)
# get_kinetic_energy(5, 3) --> (22.5, {(5, 2): 10.0, (5, 3): 22.5})
# #
# # Снова вызвали функцию с аргументами (5, 2)
# # В выводе есть информация о предыдущих вызовах.
# # Новое значение в словарь не добавилось.
# get_kinetic_energy(5, 2) --> (22.5, {(5, 2): 10.0, (5, 3): 22.5})



cache = {}  # Словарь для хранения результатов вызовов функции

def memorize(function):
    def wrapper(*args, **kwargs):
        # Проверяем, есть ли уже такой вызов в кэше
        if args not in cache:
            # Если нет, вызываем функцию и сохраняем результат
            cache[args] = function(*args, **kwargs)
        return cache[args],cache
    return wrapper


# todo Здесь ничего изменять не нужно!
@memorize
def get_kinetic_energy(weight, speed):
    """Кинетическая энергия
    :param weight: масса
    :param speed: скорость
    :return: кинетическую энергию
    """
    return (weight * speed ** 2) / 2

get_kinetic_energy(5,2)
